plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.openapi.generator' version '7.4.0'
	id 'org.springframework.cloud.contract' version '4.1.2'
	id 'org.liquibase.gradle' version '2.2.1'
}

group = 'delivery.hooray'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

repositories {
	mavenCentral()
}

ext {
	set('springBootVersion', '3.2.4')
	set('springCloudVersion', '4.1.2')
	set('springMockMvcVersion', '5.4.0')
	set('springdocVersion', '1.6.14')

	set('jacksonDatabindNullableVersion', '0.2.6')

	set('nettyVersion', '4.1.109.Final')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation "org.springdoc:springdoc-openapi-ui:${springdocVersion}"
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"

	implementation 'info.picocli:picocli:4.7.5'

	runtimeOnly "io.netty:netty-resolver-dns-native-macos:${nettyVersion}:osx-aarch_64"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation "org.springframework.cloud:spring-cloud-starter-contract-verifier:${springCloudVersion}"
	testImplementation "org.springframework.cloud:spring-cloud-contract-spec:${springCloudVersion}"
	testImplementation "io.rest-assured:spring-mock-mvc:${springMockMvcVersion}"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register("openApiGenerateOpenAI", org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	generatorName = 'spring'
	inputSpec = "$projectDir/src/main/resources/openapi.yaml"
	outputDir = "$buildDir/generated/"
	apiPackage = 'delivery.hooray.aiassistant.api'
	modelPackage = 'delivery.hooray.aiassistant.model'
	configOptions = [
			interfaceOnly: 'true',
			useTags: 'true',
			useBeanValidation: 'true',
			performBeanValidation: 'true',
			dateLibrary: 'java8',
			library: 'spring-boot',
			useSpringBoot3: 'true'
	]
}

tasks.named('compileJava').configure {
	dependsOn 'openApiGenerateOpenAI'
}

sourceSets {
	main {
		java {
			srcDirs 'src/main/java', "$buildDir/generated/src/main/java"
		}
		resources {
			srcDirs 'src/main/resources'
		}
	}
}

processResources {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar {
	archiveBaseName.set('ai-assistant')
	archiveVersion.set('1.0.0')
	manifest {
		attributes(
				'Implementation-Title': 'AI Assistant',
				'Implementation-Version': archiveVersion.get()
		)
	}
	exclude 'db/changelog/**'
}

contracts {
	baseClassForTests = 'delivery.hooray.messagehub.OpenaiApplicationTests'
}

test {
	dependsOn 'generateContractTests'
}
